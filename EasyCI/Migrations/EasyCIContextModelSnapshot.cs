// <auto-generated />
using System;
using EasyCI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyCI.Migrations
{
    [DbContext(typeof(EasyCIContext))]
    partial class EasyCIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-preview.1.24081.2");

            modelBuilder.Entity("EasyCI.Models.CIProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoBuild")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ComposeFilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<int>("DockerContainerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GitRepositoryId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastBuildDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DockerContainerId");

                    b.HasIndex("GitRepositoryId");

                    b.ToTable("CIProjects");
                });

            modelBuilder.Entity("EasyCI.Models.DockerContainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApiVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CertificatePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RemoteWorkspacePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("UseDockerApi")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UseTLS")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DockerContainers");
                });

            modelBuilder.Entity("EasyCI.Models.GitRepository", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SshKeyPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GitRepositories");
                });

            modelBuilder.Entity("EasyCI.Models.CIProject", b =>
                {
                    b.HasOne("EasyCI.Models.DockerContainer", "DockerContainer")
                        .WithMany()
                        .HasForeignKey("DockerContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyCI.Models.GitRepository", "GitRepository")
                        .WithMany()
                        .HasForeignKey("GitRepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DockerContainer");

                    b.Navigation("GitRepository");
                });
#pragma warning restore 612, 618
        }
    }
}
